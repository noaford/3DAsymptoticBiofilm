#ifndef _LONGTIMER_HPP_11092003_
#define _LONGTIMER_HPP_11092003_

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief Long time-length timer.
/// \ingroup time
/// \todo Fix HrsMinSec() to output a leading zero in front of a single digit second and minute
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <limits>
#include <string>
#include <ctime>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Timer class used for timings that might overflow the short timer.
///
/// Has less accuracy than Timer but allows for longer timings.  Maximum length is obtained from LongTimer::MaxTime().
/// \ingroup time
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class LongTimer
{
public:
//@{
  /// \name Timer initialization functions
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Starts the timer.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  LongTimer( void )  { m_nStart = std::time(&m_nStart); }
  
  // Uses compiler generated default copy constructor.
  // Uses compiler generated default destructor.
  // Uses compiler generated assignment operator.
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Restarts the timer.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Restart( void ) { m_nStart = std::time(&m_nStart); }
//@}

//@{
  /// \name Accessors
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Calculates the elapsed time in seconds.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  time_t Elapsed( void ) const 
  {
    time_t Curr;
    return( std::time(&Curr) - m_nStart ); 
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Calculates the minimum time resolution in seconds.
  /// \return The minimum resolution of the timer in seconds.
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  time_t MinTick( void ) const { return( 1 ); }
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Gives the maximum time that timer can store
  /// \return Maximum time that can be stored by the timer
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  time_t MaxTime( void ) const { return( std::numeric_limits<time_t>::max() ); }
//@}
    
//@{
  /// \name String output functions
  std::string HrsMinSec( void ) const;    
  std::string Message( const std::string message ) const;
//@}
    
//@{
  /// \name Output stream insert operator  
  friend std::ostream& operator<< ( std::ostream& o, const LongTimer& t );
//@}
        
private:
  time_t m_nStart;
};  // Class: LongTimer

#endif
