#ifndef _GNUPLOT_HPP_09022003_
#define _GNUPLOT_HPP_09022003_

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief Plotting class that outputs to gnuplot.
/// \todo Add function to set the aspect ratio
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iosfwd>  // for forward declare FILE pointer

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximum number of temporary files to be used by the gnuplot
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_MAX_TEMP_FILES =   64;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximum length of a temporary filename
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_TEMP_NAME_SIZE =  512;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximum length of a gnuplot command
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_COMMAND_SIZE   = 2048;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximum length of a plot title
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_TITLE_SIZE     =   80;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximum length of a gnuplot equation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_EQUATION_SIZE  =  512;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Maximium length of the path
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const unsigned int GNUPLOT_PATH_MAX_NAMES = 4096;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Directory to place temporary files
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const char GNUPLOT_TEMP_DIR[2] = ".";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class for sending plotting commands to an external gnuplot process.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class GNUPlot
{
public:  
//@{
  /// \name Constructors and Destructor
  GNUPlot( void );  
  GNUPlot( const GNUPlot& plot );
  ~GNUPlot( void );
//@}
  

  void Initialize( void );
  
  void Close( void );
  
  void Command( const char* szCmd, ... );
  
  void SetStyle( const char* szStyle );
  
  void SetLabelX( const char* szLabel );
  
  void SetLabelY( const char* szLabel );
  
  void SetXTics( const double Size );
  
  void SetYTics( const double Size );
  
  void ResetPlot( void );
  
//@{ 
  /// \name Plotting commands  
  void Plot( double* pX, unsigned int nSize, const char* szTitle );
  
  void Plot( double* pX, double* pY, unsigned int nSize, const char* szTitle );
  
  void Plot( double* pX, double* pY, double** pZ, unsigned int nSizeX, unsigned int nSizeY, const char* szTitle );
  
  void PlotContour( double* pX, double* pY, double** pZ, unsigned int nSizeX, unsigned int nSizeY, const char* szTitle );
  
  void PlotSurface( double* pX, double* pY, double** pZ, unsigned int nSizeX, unsigned int nSizeY, const char* szTitle );
  
  void PlotLevelSet( double* pX, double* pY, double** pZ, unsigned int nSizeX, unsigned int nSizeY, const char* szTitle );
  
  void PlotSlope( double a, double b, const char* szTitle );
  
  void PlotEquation( const char* szEquation, const char* szTitle );
//@}
   
private:
    FILE*	     m_pPlot;					    // File Pointer to GNUPlot
    char	     m_szStyle[32];				// Style Command for GNUPlot
    unsigned int m_nPlots;					// Number of Plots in Use
    
    // Array of Temporary FileNames
    char		 m_szTemp[GNUPLOT_MAX_TEMP_FILES][GNUPLOT_TEMP_NAME_SIZE];
    unsigned int m_nTemp;					// Number of Temp Files in Use
    
    char* GetProgramPath(const char* szName);
};

#endif
